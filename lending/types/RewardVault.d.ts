/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardVaultInterface extends ethers.utils.Interface {
  functions: {
    "EMERGENCY_COOLDOWN_PERIOD()": FunctionFragment;
    "EMERGENCY_WITHDRAW_WINDOW_PERIOD()": FunctionFragment;
    "activateEmergencyCooldown()": FunctionFragment;
    "coolDownStart()": FunctionFragment;
    "emergencyWithdraw(address,address,uint256)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardManager()": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setRewardManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EMERGENCY_COOLDOWN_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_WITHDRAW_WINDOW_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coolDownStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setRewardManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EMERGENCY_COOLDOWN_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_WITHDRAW_WINDOW_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coolDownStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EmergencyWithdrawlCooldown(address,uint256)": EventFragment;
    "EmergencyWithdrawlExecuted(address,address,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawlCooldown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawlExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class RewardVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardVaultInterface;

  functions: {
    EMERGENCY_COOLDOWN_PERIOD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "EMERGENCY_COOLDOWN_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    EMERGENCY_WITHDRAW_WINDOW_PERIOD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "EMERGENCY_WITHDRAW_WINDOW_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    activateEmergencyCooldown(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activateEmergencyCooldown()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    coolDownStart(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "coolDownStart()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    paused(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "paused()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rewardManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaused(bool)"(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardManager(
      _rewardManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardManager(address)"(
      _rewardManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  EMERGENCY_COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "EMERGENCY_COOLDOWN_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  EMERGENCY_WITHDRAW_WINDOW_PERIOD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "EMERGENCY_WITHDRAW_WINDOW_PERIOD()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  activateEmergencyCooldown(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activateEmergencyCooldown()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  coolDownStart(overrides?: CallOverrides): Promise<BigNumber>;

  "coolDownStart()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(address,address,uint256)"(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  "rewardManager()"(overrides?: CallOverrides): Promise<string>;

  setPaused(
    _pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaused(bool)"(
    _pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardManager(
    _rewardManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardManager(address)"(
    _rewardManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,address,uint256)"(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    EMERGENCY_COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "EMERGENCY_COOLDOWN_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EMERGENCY_WITHDRAW_WINDOW_PERIOD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "EMERGENCY_WITHDRAW_WINDOW_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activateEmergencyCooldown(overrides?: CallOverrides): Promise<void>;

    "activateEmergencyCooldown()"(overrides?: CallOverrides): Promise<void>;

    coolDownStart(overrides?: CallOverrides): Promise<BigNumber>;

    "coolDownStart()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    "rewardManager()"(overrides?: CallOverrides): Promise<string>;

    setPaused(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    "setPaused(bool)"(
      _pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardManager(
      _rewardManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardManager(address)"(
      _rewardManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EmergencyWithdrawlCooldown(
      _vaultAddress: string | null,
      _timestampWithdrawable: null
    ): EventFilter;

    EmergencyWithdrawlExecuted(
      _vaultAddress: string | null,
      _reserve: null,
      _amount: null,
      _destination: null,
      _timestamp: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    EMERGENCY_COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "EMERGENCY_COOLDOWN_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    EMERGENCY_WITHDRAW_WINDOW_PERIOD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "EMERGENCY_WITHDRAW_WINDOW_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activateEmergencyCooldown(overrides?: Overrides): Promise<BigNumber>;

    "activateEmergencyCooldown()"(overrides?: Overrides): Promise<BigNumber>;

    coolDownStart(overrides?: CallOverrides): Promise<BigNumber>;

    "coolDownStart()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPaused(_pause: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setPaused(bool)"(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardManager(
      _rewardManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardManager(address)"(
      _rewardManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EMERGENCY_COOLDOWN_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EMERGENCY_COOLDOWN_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_WITHDRAW_WINDOW_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EMERGENCY_WITHDRAW_WINDOW_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateEmergencyCooldown(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activateEmergencyCooldown()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    coolDownStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coolDownStart()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPaused(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaused(bool)"(
      _pause: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardManager(
      _rewardManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardManager(address)"(
      _rewardManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
