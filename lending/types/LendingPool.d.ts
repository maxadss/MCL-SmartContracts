/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingPoolInterface extends ethers.utils.Interface {
  functions: {
    "LENDINGPOOL_REVISION()": FunctionFragment;
    "UINT_MAX_VALUE()": FunctionFragment;
    "addressesProvider()": FunctionFragment;
    "borrow(address,uint256,uint256,uint16)": FunctionFragment;
    "claimAllReward(uint8)": FunctionFragment;
    "claimReward(address,uint8)": FunctionFragment;
    "core()": FunctionFragment;
    "dataProvider()": FunctionFragment;
    "deposit(address,uint256,uint16)": FunctionFragment;
    "feeProvider()": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "getReserveConfigurationData(address)": FunctionFragment;
    "getReserveData(address)": FunctionFragment;
    "getReserves()": FunctionFragment;
    "getUserAccountData(address)": FunctionFragment;
    "getUserReserveData(address,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "liquidationCall(address,address,address,uint256,bool)": FunctionFragment;
    "parametersProvider()": FunctionFragment;
    "readReward(address,uint8)": FunctionFragment;
    "rebalanceStableBorrowRate(address,address)": FunctionFragment;
    "redeemUnderlying(address,address,uint256,uint256)": FunctionFragment;
    "registerAllPoolsForReward()": FunctionFragment;
    "repay(address,uint256,address)": FunctionFragment;
    "rewardsMgr()": FunctionFragment;
    "setUserUseReserveAsCollateral(address,bool)": FunctionFragment;
    "swapBorrowRateMode(address)": FunctionFragment;
    "updateGovernanceStakingRewards(address)": FunctionFragment;
    "updateLpReward(address,address)": FunctionFragment;
    "updatePartialReward(address,address,uint8,uint256)": FunctionFragment;
    "updateRewards(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LENDINGPOOL_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UINT_MAX_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveConfigurationData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReserveData",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "parametersProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceStableBorrowRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAllPoolsForReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsMgr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGovernanceStakingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLpReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePartialReward",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "LENDINGPOOL_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UINT_MAX_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAllReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserveConfigurationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAllPoolsForReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardsMgr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernanceStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLpReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePartialReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(address,address,uint256,uint256,uint256,uint256,uint256,uint16,uint256)": EventFragment;
    "ClaimReward(address,address,uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint16,uint256)": EventFragment;
    "FlashLoan(address,address,uint256,uint256)": EventFragment;
    "LiquidationCall(address,address,address,uint256,uint256,uint256,address,bool,uint256)": EventFragment;
    "OriginationFeeLiquidated(address,address,address,uint256,uint256,uint256)": EventFragment;
    "RebalanceStableBorrowRate(address,address,uint256,uint256,uint256)": EventFragment;
    "RedeemUnderlying(address,address,uint256,uint256)": EventFragment;
    "Repay(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ReserveUsedAsCollateralDisabled(address,address)": EventFragment;
    "ReserveUsedAsCollateralEnabled(address,address)": EventFragment;
    "Swap(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OriginationFeeLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceStableBorrowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralEnabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export class LendingPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolInterface;

  functions: {
    LENDINGPOOL_REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "LENDINGPOOL_REVISION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    UINT_MAX_VALUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "UINT_MAX_VALUE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addressesProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressesProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(address,uint256,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimAllReward(
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimAllReward(uint8)"(
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimReward(
      _reserve: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimReward(address,uint8)"(
      _reserve: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    core(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "core()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    dataProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dataProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(address,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    feeProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "feeProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    "getReserveConfigurationData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      mTokenAddress: string;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: string;
      12: number;
    }>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      mTokenAddress: string;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: string;
      12: number;
    }>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidityBNB: BigNumber;
      totalCollateralBNB: BigNumber;
      totalBorrowsBNB: BigNumber;
      totalFeesBNB: BigNumber;
      availableBorrowsBNB: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getUserAccountData(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidityBNB: BigNumber;
      totalCollateralBNB: BigNumber;
      totalBorrowsBNB: BigNumber;
      totalFeesBNB: BigNumber;
      availableBorrowsBNB: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentMTokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: boolean;
    }>;

    "getUserReserveData(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentMTokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: boolean;
    }>;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveMToken: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "liquidationCall(address,address,address,uint256,bool)"(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveMToken: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    parametersProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "parametersProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    readReward(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "readReward(address,uint8)"(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rebalanceStableBorrowRate(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _mTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemUnderlying(address,address,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _mTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerAllPoolsForReward(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerAllPoolsForReward()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "repay(address,uint256,address)"(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    rewardsMgr(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rewardsMgr()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUserUseReserveAsCollateral(address,bool)"(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapBorrowRateMode(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapBorrowRateMode(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateGovernanceStakingRewards(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateGovernanceStakingRewards(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateLpReward(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateLpReward(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePartialReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePartialReward(address,address,uint8,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRewards(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRewards(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  "LENDINGPOOL_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  "UINT_MAX_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  "addressesProvider()"(overrides?: CallOverrides): Promise<string>;

  borrow(
    _reserve: string,
    _amount: BigNumberish,
    _interestRateMode: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(address,uint256,uint256,uint16)"(
    _reserve: string,
    _amount: BigNumberish,
    _interestRateMode: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimAllReward(
    _type: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimAllReward(uint8)"(
    _type: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimReward(
    _reserve: string,
    _type: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimReward(address,uint8)"(
    _reserve: string,
    _type: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  "core()"(overrides?: CallOverrides): Promise<string>;

  dataProvider(overrides?: CallOverrides): Promise<string>;

  "dataProvider()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _reserve: string,
    _amount: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(address,uint256,uint16)"(
    _reserve: string,
    _amount: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  feeProvider(overrides?: CallOverrides): Promise<string>;

  "feeProvider()"(overrides?: CallOverrides): Promise<string>;

  flashLoan(
    _receiver: string,
    _reserve: string,
    _amount: BigNumberish,
    _params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flashLoan(address,address,uint256,bytes)"(
    _receiver: string,
    _reserve: string,
    _amount: BigNumberish,
    _params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getReserveConfigurationData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    interestRateStrategyAddress: string;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    stableBorrowRateEnabled: boolean;
    isActive: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
    5: boolean;
    6: boolean;
    7: boolean;
  }>;

  "getReserveConfigurationData(address)"(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    interestRateStrategyAddress: string;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    stableBorrowRateEnabled: boolean;
    isActive: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
    5: boolean;
    6: boolean;
    7: boolean;
  }>;

  getReserveData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    totalLiquidity: BigNumber;
    availableLiquidity: BigNumber;
    totalBorrowsStable: BigNumber;
    totalBorrowsVariable: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowRate: BigNumber;
    stableBorrowRate: BigNumber;
    averageStableBorrowRate: BigNumber;
    utilizationRate: BigNumber;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    mTokenAddress: string;
    lastUpdateTimestamp: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: BigNumber;
    11: string;
    12: number;
  }>;

  "getReserveData(address)"(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    totalLiquidity: BigNumber;
    availableLiquidity: BigNumber;
    totalBorrowsStable: BigNumber;
    totalBorrowsVariable: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowRate: BigNumber;
    stableBorrowRate: BigNumber;
    averageStableBorrowRate: BigNumber;
    utilizationRate: BigNumber;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    mTokenAddress: string;
    lastUpdateTimestamp: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: BigNumber;
    11: string;
    12: number;
  }>;

  getReserves(overrides?: CallOverrides): Promise<string[]>;

  "getReserves()"(overrides?: CallOverrides): Promise<string[]>;

  getUserAccountData(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    totalLiquidityBNB: BigNumber;
    totalCollateralBNB: BigNumber;
    totalBorrowsBNB: BigNumber;
    totalFeesBNB: BigNumber;
    availableBorrowsBNB: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getUserAccountData(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    totalLiquidityBNB: BigNumber;
    totalCollateralBNB: BigNumber;
    totalBorrowsBNB: BigNumber;
    totalFeesBNB: BigNumber;
    availableBorrowsBNB: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  getUserReserveData(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    currentMTokenBalance: BigNumber;
    currentBorrowBalance: BigNumber;
    principalBorrowBalance: BigNumber;
    borrowRateMode: BigNumber;
    borrowRate: BigNumber;
    liquidityRate: BigNumber;
    originationFee: BigNumber;
    variableBorrowIndex: BigNumber;
    lastUpdateTimestamp: BigNumber;
    usageAsCollateralEnabled: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: boolean;
  }>;

  "getUserReserveData(address,address)"(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    currentMTokenBalance: BigNumber;
    currentBorrowBalance: BigNumber;
    principalBorrowBalance: BigNumber;
    borrowRateMode: BigNumber;
    borrowRate: BigNumber;
    liquidityRate: BigNumber;
    originationFee: BigNumber;
    variableBorrowIndex: BigNumber;
    lastUpdateTimestamp: BigNumber;
    usageAsCollateralEnabled: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: boolean;
  }>;

  initialize(
    _addressesProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _addressesProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidationCall(
    _collateral: string,
    _reserve: string,
    _user: string,
    _purchaseAmount: BigNumberish,
    _receiveMToken: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "liquidationCall(address,address,address,uint256,bool)"(
    _collateral: string,
    _reserve: string,
    _user: string,
    _purchaseAmount: BigNumberish,
    _receiveMToken: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  parametersProvider(overrides?: CallOverrides): Promise<string>;

  "parametersProvider()"(overrides?: CallOverrides): Promise<string>;

  readReward(
    _reserve: string,
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "readReward(address,uint8)"(
    _reserve: string,
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebalanceStableBorrowRate(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rebalanceStableBorrowRate(address,address)"(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    _mTokenBalanceAfterRedeem: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemUnderlying(address,address,uint256,uint256)"(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    _mTokenBalanceAfterRedeem: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerAllPoolsForReward(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerAllPoolsForReward()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repay(
    _reserve: string,
    _amount: BigNumberish,
    _onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "repay(address,uint256,address)"(
    _reserve: string,
    _amount: BigNumberish,
    _onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  rewardsMgr(overrides?: CallOverrides): Promise<string>;

  "rewardsMgr()"(overrides?: CallOverrides): Promise<string>;

  setUserUseReserveAsCollateral(
    _reserve: string,
    _useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUserUseReserveAsCollateral(address,bool)"(
    _reserve: string,
    _useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapBorrowRateMode(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapBorrowRateMode(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateGovernanceStakingRewards(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateGovernanceStakingRewards(address)"(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateLpReward(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateLpReward(address,address)"(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePartialReward(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePartialReward(address,address,uint8,uint256)"(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRewards(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRewards(address,address)"(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "LENDINGPOOL_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "UINT_MAX_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    "addressesProvider()"(overrides?: CallOverrides): Promise<string>;

    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(address,uint256,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAllReward(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimAllReward(uint8)"(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(address,uint8)"(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    core(overrides?: CallOverrides): Promise<string>;

    "core()"(overrides?: CallOverrides): Promise<string>;

    dataProvider(overrides?: CallOverrides): Promise<string>;

    "dataProvider()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeProvider(overrides?: CallOverrides): Promise<string>;

    "feeProvider()"(overrides?: CallOverrides): Promise<string>;

    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "flashLoan(address,address,uint256,bytes)"(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    "getReserveConfigurationData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      mTokenAddress: string;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: string;
      12: number;
    }>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      mTokenAddress: string;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: string;
      12: number;
    }>;

    getReserves(overrides?: CallOverrides): Promise<string[]>;

    "getReserves()"(overrides?: CallOverrides): Promise<string[]>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidityBNB: BigNumber;
      totalCollateralBNB: BigNumber;
      totalBorrowsBNB: BigNumber;
      totalFeesBNB: BigNumber;
      availableBorrowsBNB: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getUserAccountData(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidityBNB: BigNumber;
      totalCollateralBNB: BigNumber;
      totalBorrowsBNB: BigNumber;
      totalFeesBNB: BigNumber;
      availableBorrowsBNB: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentMTokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: boolean;
    }>;

    "getUserReserveData(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentMTokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: boolean;
    }>;

    initialize(
      _addressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _addressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveMToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidationCall(address,address,address,uint256,bool)"(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveMToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    parametersProvider(overrides?: CallOverrides): Promise<string>;

    "parametersProvider()"(overrides?: CallOverrides): Promise<string>;

    readReward(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readReward(address,uint8)"(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "rebalanceStableBorrowRate(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _mTokenBalanceAfterRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemUnderlying(address,address,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _mTokenBalanceAfterRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAllPoolsForReward(overrides?: CallOverrides): Promise<void>;

    "registerAllPoolsForReward()"(overrides?: CallOverrides): Promise<void>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(address,uint256,address)"(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsMgr(overrides?: CallOverrides): Promise<string>;

    "rewardsMgr()"(overrides?: CallOverrides): Promise<string>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUserUseReserveAsCollateral(address,bool)"(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapBorrowRateMode(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapBorrowRateMode(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGovernanceStakingRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateGovernanceStakingRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLpReward(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateLpReward(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePartialReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePartialReward(address,address,uint8,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewards(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRewards(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Borrow(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _borrowRateMode: null,
      _borrowRate: null,
      _originationFee: null,
      _borrowBalanceIncrease: null,
      _referral: BigNumberish | null,
      _timestamp: null
    ): EventFilter;

    ClaimReward(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _timestamp: null
    ): EventFilter;

    Deposit(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _referral: BigNumberish | null,
      _timestamp: null
    ): EventFilter;

    FlashLoan(
      _target: string | null,
      _reserve: string | null,
      _amount: null,
      _timestamp: null
    ): EventFilter;

    LiquidationCall(
      _collateral: string | null,
      _reserve: string | null,
      _user: string | null,
      _purchaseAmount: null,
      _liquidatedCollateralAmount: null,
      _accruedBorrowInterest: null,
      _liquidator: null,
      _receiveMToken: null,
      _timestamp: null
    ): EventFilter;

    OriginationFeeLiquidated(
      _collateral: string | null,
      _reserve: string | null,
      _user: string | null,
      _feeLiquidated: null,
      _liquidatedCollateralForFee: null,
      _timestamp: null
    ): EventFilter;

    RebalanceStableBorrowRate(
      _reserve: string | null,
      _user: string | null,
      _newStableRate: null,
      _borrowBalanceIncrease: null,
      _timestamp: null
    ): EventFilter;

    RedeemUnderlying(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _timestamp: null
    ): EventFilter;

    Repay(
      _reserve: string | null,
      _user: string | null,
      _repayer: string | null,
      _amountMinusFees: null,
      _fees: null,
      _borrowBalanceIncrease: null,
      _timestamp: null
    ): EventFilter;

    ReserveUsedAsCollateralDisabled(
      _reserve: string | null,
      _user: string | null
    ): EventFilter;

    ReserveUsedAsCollateralEnabled(
      _reserve: string | null,
      _user: string | null
    ): EventFilter;

    Swap(
      _reserve: string | null,
      _user: string | null,
      _newRateMode: null,
      _newRate: null,
      _borrowBalanceIncrease: null,
      _timestamp: null
    ): EventFilter;
  };

  estimateGas: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "LENDINGPOOL_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "UINT_MAX_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "addressesProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(address,uint256,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimAllReward(
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimAllReward(uint8)"(
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimReward(
      _reserve: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimReward(address,uint8)"(
      _reserve: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    "core()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "dataProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(address,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    feeProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "feeProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flashLoan(address,address,uint256,bytes)"(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveConfigurationData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserAccountData(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserReserveData(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveMToken: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "liquidationCall(address,address,address,uint256,bool)"(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveMToken: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    parametersProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "parametersProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    readReward(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readReward(address,uint8)"(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rebalanceStableBorrowRate(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _mTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemUnderlying(address,address,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _mTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerAllPoolsForReward(overrides?: Overrides): Promise<BigNumber>;

    "registerAllPoolsForReward()"(overrides?: Overrides): Promise<BigNumber>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "repay(address,uint256,address)"(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    rewardsMgr(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsMgr()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUserUseReserveAsCollateral(address,bool)"(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapBorrowRateMode(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapBorrowRateMode(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateGovernanceStakingRewards(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateGovernanceStakingRewards(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateLpReward(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateLpReward(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePartialReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePartialReward(address,address,uint8,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRewards(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRewards(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LENDINGPOOL_REVISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LENDINGPOOL_REVISION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UINT_MAX_VALUE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressesProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(address,uint256,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimAllReward(
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimAllReward(uint8)"(
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _reserve: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimReward(address,uint8)"(
      _reserve: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "core()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dataProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    feeProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveConfigurationData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserAccountData(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserReserveData(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveMToken: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationCall(address,address,address,uint256,bool)"(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveMToken: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    parametersProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parametersProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readReward(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readReward(address,uint8)"(
      _reserve: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rebalanceStableBorrowRate(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _mTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemUnderlying(address,address,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _mTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerAllPoolsForReward(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerAllPoolsForReward()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "repay(address,uint256,address)"(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    rewardsMgr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsMgr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUserUseReserveAsCollateral(address,bool)"(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapBorrowRateMode(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapBorrowRateMode(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateGovernanceStakingRewards(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateGovernanceStakingRewards(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateLpReward(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateLpReward(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePartialReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePartialReward(address,address,uint8,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRewards(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRewards(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
