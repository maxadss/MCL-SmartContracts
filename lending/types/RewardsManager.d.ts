/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardsManagerInterface extends ethers.utils.Interface {
  functions: {
    "addRewardItem(address,uint256,uint256,uint256)": FunctionFragment;
    "addressesProvider()": FunctionFragment;
    "coreAddress()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "lendingPoolAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "readRewards(address,address,uint8,uint256)": FunctionFragment;
    "registerPools(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetReward(address,address,uint8)": FunctionFragment;
    "rewardPools(address)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateReward(address,address,uint8,uint256,uint256)": FunctionFragment;
    "updateRewards(address,address,uint256,uint256,uint256)": FunctionFragment;
    "withdrawFromVault(uint8,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRewardItem",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lendingPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readRewards",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetReward",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rewardPools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReward",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVault",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRewardItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVault",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class RewardsManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardsManagerInterface;

  functions: {
    addRewardItem(
      _reserve: string,
      _lpRewardAmt: BigNumberish,
      lpBase: BigNumberish,
      govRewardAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRewardItem(address,uint256,uint256,uint256)"(
      _reserve: string,
      _lpRewardAmt: BigNumberish,
      lpBase: BigNumberish,
      govRewardAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addressesProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressesProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    coreAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "coreAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lendingPoolAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "lendingPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    readRewards(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "readRewards(address,address,uint8,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    registerPools(
      _reserves: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerPools(address[])"(
      _reserves: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    resetReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "resetReward(address,address,uint8)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      nextRewardPtr: BigNumber;
      valid: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    "rewardPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      nextRewardPtr: BigNumber;
      valid: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    stakingToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "stakingToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateReward(address,address,uint8,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRewards(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRewards(address,address,uint256,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFromVault(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFromVault(uint8,address,address,uint256)"(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addRewardItem(
    _reserve: string,
    _lpRewardAmt: BigNumberish,
    lpBase: BigNumberish,
    govRewardAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRewardItem(address,uint256,uint256,uint256)"(
    _reserve: string,
    _lpRewardAmt: BigNumberish,
    lpBase: BigNumberish,
    govRewardAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  "addressesProvider()"(overrides?: CallOverrides): Promise<string>;

  coreAddress(overrides?: CallOverrides): Promise<string>;

  "coreAddress()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  lendingPoolAddress(overrides?: CallOverrides): Promise<string>;

  "lendingPoolAddress()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  readRewards(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    _share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "readRewards(address,address,uint8,uint256)"(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    _share: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerPools(
    _reserves: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerPools(address[])"(
    _reserves: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  resetReward(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "resetReward(address,address,uint8)"(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardPools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    nextRewardPtr: BigNumber;
    valid: boolean;
    0: BigNumber;
    1: boolean;
  }>;

  "rewardPools(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    nextRewardPtr: BigNumber;
    valid: boolean;
    0: BigNumber;
    1: boolean;
  }>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  "stakingToken()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateReward(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    _shares: BigNumberish,
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateReward(address,address,uint8,uint256,uint256)"(
    _reserve: string,
    _user: string,
    _type: BigNumberish,
    _shares: BigNumberish,
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRewards(
    _reserve: string,
    _user: string,
    _sharesLp: BigNumberish,
    _sharesGov: BigNumberish,
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRewards(address,address,uint256,uint256,uint256)"(
    _reserve: string,
    _user: string,
    _sharesLp: BigNumberish,
    _sharesGov: BigNumberish,
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFromVault(
    _type: BigNumberish,
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFromVault(uint8,address,address,uint256)"(
    _type: BigNumberish,
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addRewardItem(
      _reserve: string,
      _lpRewardAmt: BigNumberish,
      lpBase: BigNumberish,
      govRewardAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardItem(address,uint256,uint256,uint256)"(
      _reserve: string,
      _lpRewardAmt: BigNumberish,
      lpBase: BigNumberish,
      govRewardAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    "addressesProvider()"(overrides?: CallOverrides): Promise<string>;

    coreAddress(overrides?: CallOverrides): Promise<string>;

    "coreAddress()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<string>;

    "lendingPoolAddress()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    readRewards(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readRewards(address,address,uint8,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPools(
      _reserves: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "registerPools(address[])"(
      _reserves: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    resetReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "resetReward(address,address,uint8)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      nextRewardPtr: BigNumber;
      valid: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    "rewardPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      nextRewardPtr: BigNumber;
      valid: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    "stakingToken()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateReward(address,address,uint8,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewards(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRewards(address,address,uint256,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromVault(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromVault(uint8,address,address,uint256)"(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addRewardItem(
      _reserve: string,
      _lpRewardAmt: BigNumberish,
      lpBase: BigNumberish,
      govRewardAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRewardItem(address,uint256,uint256,uint256)"(
      _reserve: string,
      _lpRewardAmt: BigNumberish,
      lpBase: BigNumberish,
      govRewardAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "addressesProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    coreAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "coreAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "lendingPoolAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    readRewards(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readRewards(address,address,uint8,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPools(
      _reserves: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerPools(address[])"(
      _reserves: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    resetReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "resetReward(address,address,uint8)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateReward(address,address,uint8,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRewards(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRewards(address,address,uint256,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFromVault(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFromVault(uint8,address,address,uint256)"(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewardItem(
      _reserve: string,
      _lpRewardAmt: BigNumberish,
      lpBase: BigNumberish,
      govRewardAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRewardItem(address,uint256,uint256,uint256)"(
      _reserve: string,
      _lpRewardAmt: BigNumberish,
      lpBase: BigNumberish,
      govRewardAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressesProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coreAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "coreAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingPoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lendingPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readRewards(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readRewards(address,address,uint8,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPools(
      _reserves: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerPools(address[])"(
      _reserves: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    resetReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "resetReward(address,address,uint8)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateReward(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateReward(address,address,uint8,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _type: BigNumberish,
      _shares: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRewards(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRewards(address,address,uint256,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _sharesLp: BigNumberish,
      _sharesGov: BigNumberish,
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFromVault(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFromVault(uint8,address,address,uint256)"(
      _type: BigNumberish,
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
